"""几何模块 - 三维几何变换

提供位姿变换、旋转表示转换和几何验证功能。
"""

from .pose import (
    identity_pose,
    create_pose,
    decompose_pose,
    invert_pose,
    compose_poses,
    transform_points,
    pose_distance,
    rodrigues_to_rotation_matrix,
    rotation_matrix_to_rodrigues,
    euler_to_rotation_matrix,
    rotation_matrix_to_euler,
    quaternion_to_rotation_matrix,
    rotation_matrix_to_quaternion,
    essential_matrix_to_pose,
    fundamental_matrix_to_essential_matrix,
    is_valid_rotation_matrix,
    is_valid_pose,
)
from .transforms import (
    rotation_matrix_from_euler,
    rotation_matrix_from_axis_angle,
    rotation_matrix_from_quaternion,
    quaternion_from_rotation_matrix,
    euler_from_rotation_matrix,
    axis_angle_from_rotation_matrix,
    pose_matrix,
    decompose_pose_matrix,
    invert_pose_matrix,
    compose_poses as transforms_compose_poses,
    relative_pose,
    transform_points_3d,
    transform_points_2d,
    essential_matrix_to_pose as transforms_essential_matrix_to_pose,
    fundamental_matrix_to_essential,
    essential_matrix_from_pose,
    skew_symmetric_matrix,
    normalize_rotation_matrix,
    angle_between_vectors,
    interpolate_poses,
    pose_distance as transforms_pose_distance,
    validate_rotation_matrix,
    validate_pose_matrix,
)

__all__ = [
    # 位姿操作
    "identity_pose",
    "create_pose",
    "decompose_pose",
    "invert_pose",
    "compose_poses",
    "transform_points",
    "pose_distance",
    # 旋转表示
    "rodrigues_to_rotation_matrix",
    "rotation_matrix_to_rodrigues",
    "euler_to_rotation_matrix",
    "rotation_matrix_to_euler",
    "quaternion_to_rotation_matrix",
    "rotation_matrix_to_quaternion",
    # 矩阵变换
    "essential_matrix_to_pose",
    "fundamental_matrix_to_essential_matrix",
    # 验证函数
    "is_valid_rotation_matrix",
    "is_valid_pose",
    # 变换函数
    "rotation_matrix_from_euler",
    "rotation_matrix_from_axis_angle",
    "rotation_matrix_from_quaternion",
    "quaternion_from_rotation_matrix",
    "euler_from_rotation_matrix",
    "axis_angle_from_rotation_matrix",
    "pose_matrix",
    "decompose_pose_matrix",
    "invert_pose_matrix",
    "compose_poses",
    "relative_pose",
    "transform_points_3d",
    "transform_points_2d",
    "essential_matrix_to_pose",
    "fundamental_matrix_to_essential",
    "essential_matrix_from_pose",
    "skew_symmetric_matrix",
    "normalize_rotation_matrix",
    "angle_between_vectors",
    "interpolate_poses",
    "transforms_pose_distance",
    "validate_rotation_matrix",
    "validate_pose_matrix",
]
